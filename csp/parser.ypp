/* 
   Copyright (c) 2011-2023 Andreas F. Borchert
   All rights reserved.

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   "Software"), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:

   The above copyright notice and this permission notice shall be
   included in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
   KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
   WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
   BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
   ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.
*/

/*
   Parser for a subset of CSP:

   Terminals:
      UCIDENT    Identifier that begins with an upper case letter
      LCIDENT    Identifier that begins with a lower case letter
      ALPHA      keyword "alpha"
      CHAOS      keyword "CHAOS"
      INTEGER    keyword "integer"
      MU         keyword "mu"
      RUN        keyword "RUN"
      SKIP       keyword "SKIP"
      STOP       keyword "STOP"
      STRING     keyword "string"

   Productions:
      Unit = MainProcess Definitions .
      MainProcess = ProcessDefinition | ProcessExpression .
      Definitions = Definition |
	 Definitions Definition .
      Definition = FunctionDefinition | ChannelDefinition | ProcessDefinition .
      FunctionDefinition = Identifier "(" Identifier ")" = Identifier .
      ChannelDefinition = ALPHA Identifier "=" Alphabet |
	 ALPHA Identifier "(" Process ")" "=" Alphabet |
	 ALPHA Identifier "=" ChannelDefinition |
	 ALPHA Identifier "(" Process ")" "=" ChannelDefinition .
      ProcessDefinition = Process "=" ProcessExpression |
	 Process Alphabet "=" ProcessExpression |
	 Process Parameters "=" ProcessExpression |
	 Process Parameters Alphabet "=" ProcessExpression .
      ProcessExpression = ProcessSequence .
      ProcessSequence = ParallelProcesses |
	 ProcessSequence ";" ParallelProcesses .
      ParallelProcesses = InterleavingProcesses |
	 ParallelProcesses "||" InterleavingProcesses .
      InterleavingProcesses = ExternalChoice |
	 InterleavingProcesses "|||" ExternalChoice .
      ExternalChoice = InternalChoice |
	 ExternalChoice "[]" InternalChoice .
      InternalChoice = PipeExpression |
	 InternalChoice "|~|" PipeExpression .
      PipeExpression = SubordinationExpression |
	 PipeExpression ">>" SubordinationExpression .
      SubordinationExpression = ConcealedProcessExpression |
	 SubordinationExpression "//" ConcealedProcessExpression .
      ConcealedProcessExpression = LabeledProcessExpression |
	 LabeledProcessExpression "\" Alphabet .
      LabeledProcessExpression = SimpleProcessExpression |
	 Label COLON SimpleProcessExpression .
      SimpleProcessExpression = Process |
	 Process Parameters |
	 CHAOS Alphabet | CHAOS ALPHA Process |
	 RUN Alphabet | RUN ALPHA Process |
	 STOP Alphabet | STOP ALPHA Process |
	 SKIP Alphabet | SKIP ALPHA Process |
	 "(" ProcessExpression ")" |
	 "(" Choices ")" |
	 Identifier "(" ProcessExpression ")" |
	 MuHeader "(" Choices ")" .
      MuHeader = MU Process "." |
	 MU Process ":" Alphabet "." |
	 MU Process ":" ALPHA Process "." .
      Choices = PrefixExpression |
	 Choices "|" PrefixExpression .
      PrefixExpression = Identifier "->" PrefixExpression |
	 Identifier "->" ProcessExpression |
	 Identifier "?" Identifier "->" PrefixExpression |
	 Identifier "?" Identifier "->" ProcessExpression |
	 Identifier "!" Identifier "->" PrefixExpression |
	 Identifier "!" Expression "->" PrefixExpression |
	 Identifier "!" Identifier "->" ProcessExpression |
	 Identifier "!" Expression "->" ProcessExpression .
      Parameters = "(" ParameterList ")" .
      ParameterList = Identifier | ParameterList "," Identifier .
      Expression = "(" IntegerExpression ")" .
      IntegerExpression = Identifier |
	 "(" IntegerExpression ")" |
	 IntegerExpression "+" IntegerExpression |
	 IntegerExpression "-" IntegerExpression |
	 IntegerExpression "*" IntegerExpression |
	 IntegerExpression "div" IntegerExpression |
	 IntegerExpression "mod" IntegerExpression .
      Alphabet = "{" "}" | "{" AlphabetMembers "}" | STRING | INTEGER .
      AlphabetMembers = Event | AlphabetMembers "," Event .
      Event = Identifier .
      Label = Identifier .
      Identifier = LCIDENT | Identifier "." LCIDENT .
      Process = UCIDENT .
*/

%{

#include <memory>

#include "context.hpp" // to be included first

#include "channel.hpp"
#include "chaos-process.hpp"
#include "concealed-process.hpp"
#include "error.hpp"
#include "external-choice.hpp"
#include "event-set.hpp"
#include "identifier.hpp"
#include "interleaving-processes.hpp"
#include "internal-choice.hpp"
#include "mapped-process.hpp"
#include "object.hpp"
#include "parallel-processes.hpp"
#include "parameters.hpp"
#include "pipe.hpp"
#include "prefixed-process.hpp"
#include "process-definition.hpp"
#include "process-reference.hpp"
#include "process-sequence.hpp"
#include "process.hpp"
#include "reading-process.hpp"
#include "recursive-process.hpp"
#include "run-process.hpp"
#include "scanner.hpp"
#include "selecting-process.hpp"
#include "skip-process.hpp"
#include "stop-process.hpp"
#include "subordination.hpp"
#include "symbol-changer.hpp"
#include "symtable.hpp"
#include "writing-process.hpp"

using namespace CSP;

ChannelPtr get_channel(const location& loc, Context& context,
      const std::string& name);
NamedProcessPtr get_process(const location& loc, const std::string& name,
      Context& context);

%}

%skeleton "lalr1.cc"
%define api.prefix {csp}
%define api.namespace { CSP }
%define api.value.type { CSP::ObjectPtr }
%defines
%verbose
%locations
%define parse.lac full
%define parse.error detailed
%parse-param { Context& csp_context }
%parse-param { ProcessPtr& p }
%lex-param { Context& csp_context }

/* operators */
%token ARROW "'->'"
%token CONCEAL "'\\'"
%token EQUAL "'='"
%token EXTERNAL_CHOICE "'[]'"
%token INTERLEAVES "'|||'"
%token INTERNAL_CHOICE "'|~|'"
%token OR "'|'"
%token PARALLEL "'||'"
%token SUBORDINATION "'//'"
%token PIPE "'>>'"

/* expressions */
%token PLUS "'+'"
%token MINUS "'-'"
%token TIMES "'*'"
%token DIV "'div'"
%token MOD "'mod'"

/* delimiters */
%token COLON "':'"
%token COMMA "','"
%token EM "'!'"
%token LBRACE "'{'"
%token LPAREN "'('"
%token PERIOD "'.'"
%token QM "'?'"
%token RBRACE "'}'"
%token RPAREN "')'"
%token SEMICOLON "';'"

/* identifiers */
%token LCIDENT UCIDENT

/* keywords */
%token ALPHA "'alpha'"
%token CHAOS "'CHAOS'"
%token INTEGER "'integer'"
%token MU "'mu'"
%token RUN "'RUN'"
%token SKIP "'SKIP'"
%token STOP "'STOP'"
%token STRING "'string'"

/* precedence, from lowest to highest */
%left PLUS MINUS
%left TIMES DIV MOD

%%

start:
      { csp_context.symtab().open(); }
   unit
      {
	 p = std::dynamic_pointer_cast<Process>($2);
	 if (!csp_context.scanner().at_eof()) {
	    error(@$, "CSP program ends already here");
	 }
	 csp_context.symtab().close();
      }
   ;

unit: main_process
   | main_process definitions
   ;

main_process: process_definition | process_expression
   ;

definitions: definition
      { $$ = $1; }
   | definitions definition
      { $$ = $1; } // just remember the very first definition
   ;

definition: function_definition
   | process_definition
   | channel_definition
   ;

channel_definition: ALPHA identifier EQUAL alphabet_expression
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($2);
	 auto evset = std::dynamic_pointer_cast<EventSet>($4);
	 auto channel = get_channel(@$, csp_context, id->get_name());
	 if (!channel->set_alphabet(evset->get_alphabet())) {
	    yyerror(@$, csp_context, "alphabet of channel '%s' has "
	       "already been defined", id->get_name());
	 }
	 $$ = evset;
      }
   | ALPHA identifier LPAREN process RPAREN EQUAL alphabet_expression
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($2);
	 auto pid = std::dynamic_pointer_cast<Identifier>($4);
	 auto pn = get_process(@$, pid->get_name(), csp_context);
	 auto evset = std::dynamic_pointer_cast<EventSet>($7);
	 auto channel = get_channel(@$, csp_context, id->get_name());
	 if (!channel->set_alphabet(pn->get_name(), evset->get_alphabet())) {
	    yyerror(@$, csp_context, "alphabet of channel '%s' has "
	       "already been defined", id->get_name());
	 }
	 pn->add_channel(channel);
	 $$ = evset;
      }
   ;

alphabet_expression: alphabet
   | channel_definition
   ;

function_definition: identifier LPAREN identifier RPAREN EQUAL identifier
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($1);
	 auto event1 = std::dynamic_pointer_cast<Identifier>($3);
	 auto event2 = std::dynamic_pointer_cast<Identifier>($6);
	 auto function = csp_context.symtab().lookup<FunctionDefinition>(
	    id->get_name());
	 if (!function) {
	    function = std::make_shared<FunctionDefinition>(id->get_name());
	    assert(function);
	    bool ok = csp_context.symtab().insert(id->get_name(), function);
	    assert(ok);
	 }
	 if (!function->add_mapping(event1, event2)) {
	    yyerror(@$, csp_context, "function definition '%s(%s) = %s' "
	       "violates injectivity", id->get_name(),
	       event1->get_name(), event2->get_name());
	 }
	 $$ = function;
      }
   ;

process_definition: process_definition_header EQUAL process_expression
      {
	 auto np = std::dynamic_pointer_cast<ProcessDefinition>($1);
	 auto p = std::dynamic_pointer_cast<Process>($3);
	 np->set_process(p);
	 csp_context.symtab().close();
      }
   ;
process_definition_header: process
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($1);
	 auto process = std::make_shared<ProcessDefinition>(id->get_name());
	 bool ok = csp_context.symtab().insert(id->get_name(), process);
	 if (!ok) {
	    yyerror(@$, csp_context, "process '%s' defined multiple times",
	       id->get_name());
	 }
	 csp_context.symtab().open();
	 $$ = process;
      }
   | process alphabet
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($1);
	 auto evset = std::dynamic_pointer_cast<EventSet>($2);
	 auto process = std::make_shared<ProcessDefinition>(id->get_name());
	 process->set_alphabet(evset->get_alphabet());
	 bool ok = csp_context.symtab().insert(id->get_name(), process);
	 if (!ok) {
	    yyerror(@$, csp_context, "process '%s' defined multiple times",
	       id->get_name());
	 }
	 csp_context.symtab().open();
	 $$ = process;
      }
   | process parameters
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($1);
	 auto formal = std::dynamic_pointer_cast<Parameters>($2);
	 auto process = std::make_shared<ProcessDefinition>(id->get_name(),
	    formal);
	 bool ok = csp_context.symtab().insert(id->get_name(), process);
	 if (!ok) {
	    yyerror(@$, csp_context, "process '%s' defined multiple times",
	       id->get_name());
	 }
	 csp_context.symtab().open();
	 process->enter_parameters(csp_context.symtab());
	 $$ = process;
      }
   | process parameters alphabet
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($1);
	 auto formal = std::dynamic_pointer_cast<Parameters>($2);
	 auto evset = std::dynamic_pointer_cast<EventSet>($3);
	 auto process = std::make_shared<ProcessDefinition>(id->get_name(),
	    formal);
	 process->set_alphabet(evset->get_alphabet());
	 bool ok = csp_context.symtab().insert(id->get_name(), process);
	 if (!ok) {
	    yyerror(@$, csp_context, "process '%s' defined multiple times",
	       id->get_name());
	 }
	 csp_context.symtab().open();
	 process->enter_parameters(csp_context.symtab());
	 $$ = process;
      }
   ;

process_expression: process_sequence
   ;

process_sequence: parallel_processes
   | process_sequence SEMICOLON parallel_processes
      {
	 auto p1 = std::dynamic_pointer_cast<Process>($1);
	 auto p2 = std::dynamic_pointer_cast<Process>($3);
	 $$ = std::make_shared<ProcessSequence>(p1, p2);
      }
   ;

parallel_processes: interleaving_processes
   | parallel_processes PARALLEL interleaving_processes
      {
	 auto p1 = std::dynamic_pointer_cast<Process>($1);
	 auto p2 = std::dynamic_pointer_cast<Process>($3);
	 $$ = std::make_shared<ParallelProcesses>(p1, p2);
      }
   ;

interleaving_processes: external_choice
   | interleaving_processes INTERLEAVES external_choice
      {
	 auto p1 = std::dynamic_pointer_cast<Process>($1);
	 auto p2 = std::dynamic_pointer_cast<Process>($3);
	 $$ = std::make_shared<InterleavingProcesses>(p1, p2);
      }
   ;

external_choice: internal_choice
   | external_choice EXTERNAL_CHOICE internal_choice
      {
	 auto p1 = std::dynamic_pointer_cast<Process>($1);
	 auto p2 = std::dynamic_pointer_cast<Process>($3);
	 $$ = std::make_shared<ExternalChoice>(p1, p2);
      }
   ;

internal_choice: pipe_expression
   | internal_choice INTERNAL_CHOICE pipe_expression
      {
	 auto p1 = std::dynamic_pointer_cast<Process>($1);
	 auto p2 = std::dynamic_pointer_cast<Process>($3);
	 $$ = std::make_shared<InternalChoice>(p1, p2);
      }
   ;

pipe_expression: subordination_expression
   | pipe_expression PIPE subordination_expression
      {
	 auto p1 = std::dynamic_pointer_cast<Process>($1);
	 auto p2 = std::dynamic_pointer_cast<Process>($3);
	 $$ = std::make_shared<Pipe>(csp_context, p1, p2);
      }
   ;

subordination_expression: concealed_process
   | subordination_expression SUBORDINATION concealed_process
      {
	 auto p = std::dynamic_pointer_cast<Process>($1);
	 auto q = std::dynamic_pointer_cast<Process>($3);
	 $$ = std::make_shared<Subordination>(p, q);
      }
   ;

concealed_process: labeled_process_expression
   | labeled_process_expression CONCEAL alphabet
      {
	 auto p = std::dynamic_pointer_cast<Process>($1);
	 auto events = std::dynamic_pointer_cast<EventSet>($3);
	 auto concealed = events->get_alphabet();
	 if (concealed.cardinality() == 0) {
	    $$ = $1; // concealment operator with an empty set has no effect
	 } else {
	    $$ = std::make_shared<ConcealedProcess>(p, concealed);
	 }
      }
   ;

labeled_process_expression: simple_process_expression
   | label COLON simple_process_expression
      {
	 auto p = std::dynamic_pointer_cast<Process>($3);
	 auto label = std::dynamic_pointer_cast<Identifier>($1)->get_name();
	 auto changer = std::make_shared<Qualifier>(label);
	 $$ = std::make_shared<MappedProcess>(p, changer);
      }
   ;
simple_process_expression: process
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($1);
	 auto p = std::make_shared<ProcessReference>(@$,
	    id->get_name(), csp_context);
	 p->register_ref();
	 $$ = p;
      }
   | process parameters
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($1);
	 auto actual = std::dynamic_pointer_cast<Parameters>($2);
	 auto p = std::make_shared<ProcessReference>(@$, id->get_name(),
	    actual, csp_context);
	 p->register_ref();
	 $$ = p;
      }
   | CHAOS alphabet
      {
	 auto evset = std::dynamic_pointer_cast<EventSet>($2);
	 $$ = std::make_shared<ChaosProcess>(evset->get_alphabet());
      }
   | CHAOS ALPHA process
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($3);
	 auto alpha_p = get_process(@$, id->get_name(), csp_context);
	 $$ = std::make_shared<ChaosProcess>(alpha_p);
      }
   | RUN alphabet
      {
	 auto evset = std::dynamic_pointer_cast<EventSet>($2);
	 $$ = std::make_shared<RunProcess>(evset->get_alphabet());
      }
   | RUN ALPHA process
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($3);
	 auto alpha_p = get_process(@$, id->get_name(), csp_context);
	 $$ = std::make_shared<RunProcess>(alpha_p);
      }
   | SKIP alphabet
      {
	 auto evset = std::dynamic_pointer_cast<EventSet>($2);
	 $$ = std::make_shared<SkipProcess>(evset->get_alphabet());
      }
   | SKIP ALPHA process
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($3);
	 auto alpha_p = get_process(@$, id->get_name(), csp_context);
	 $$ = std::make_shared<SkipProcess>(alpha_p);
      }
   | STOP alphabet
      {
	 auto evset = std::dynamic_pointer_cast<EventSet>($2);
	 $$ = std::make_shared<StopProcess>(evset->get_alphabet());
      }
   | STOP ALPHA process
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($3);
	 auto alpha_p = get_process(@$, id->get_name(), csp_context);
	 $$ = std::make_shared<StopProcess>(alpha_p);
      }
   | open_expression process_expression close_expression
      { $$ = $2; }
   | open_expression choices close_expression
      { $$ = $2; }
   | identifier LPAREN process_expression RPAREN
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($1);
	 auto p = std::dynamic_pointer_cast<Process>($3);
	 auto f = csp_context.symtab().lookup<FunctionDefinition>(id->get_name());
	 if (!f) {
	    f = std::make_shared<FunctionDefinition>(id->get_name());
	    bool ok = csp_context.symtab().global_insert(id->get_name(), f);
	    if (!ok) {
	       yyerror(@$, csp_context, "conflicting references for '%s'",
		  id->get_name());
	    }
	 }
	 $$ = std::make_shared<MappedProcess>(p, f);
      }
   | mu_header LPAREN choices RPAREN
      {
	 auto p = std::dynamic_pointer_cast<RecursiveProcess>($1);
	 auto pe = std::dynamic_pointer_cast<Process>($3);
	 p->set_process(pe);
	 csp_context.symtab().close();
	 $$ = p;
      }
   ;

mu_header: MU process PERIOD
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($2);
	 auto p = std::make_shared<RecursiveProcess>(id->get_name());
	 csp_context.symtab().open();
	 bool ok = csp_context.symtab().insert(id->get_name(), p); assert(ok);
	 $$ = p;
      }
   | MU process COLON alphabet PERIOD
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($2);
	 auto evset = std::dynamic_pointer_cast<EventSet>($4);
	 auto p = std::make_shared<RecursiveProcess>(id->get_name(),
	    evset->get_alphabet());
	 csp_context.symtab().open();
	 bool ok = csp_context.symtab().insert(id->get_name(), p); assert(ok);
	 $$ = p;
      }
   | MU process COLON ALPHA process PERIOD
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($2);
	 auto id_alpha_p = std::dynamic_pointer_cast<Identifier>($3);
	 auto alpha_p = get_process(@$, id_alpha_p->get_name(), csp_context);
	 auto p = std::make_shared<RecursiveProcess>(id->get_name(), alpha_p);
	 csp_context.symtab().open();
	 bool ok = csp_context.symtab().insert(id->get_name(), p); assert(ok);
	 $$ = p;
      }
   ;

choices: prefix_expression
      {
	 auto p = std::dynamic_pointer_cast<Process>($1);
	 $$ = std::make_shared<SelectingProcess>(p);
      }
   | choices OR prefix_expression
      {
	 auto p1 = std::dynamic_pointer_cast<SelectingProcess>($1);
	 auto p2 = std::dynamic_pointer_cast<Process>($3);
	 p1->add_choice(p2);
	 $$ = p1;
      }
   ;

prefix_expression: identifier ARROW prefix_or_process_expression
      {  
	 auto event = std::dynamic_pointer_cast<Identifier>($1);
	 auto process = std::dynamic_pointer_cast<Process>($3);
	 $$ = std::make_shared<PrefixedProcess>(event->get_name(), process,
	    csp_context.symtab());
      }
   | input_operation ARROW prefix_or_process_expression
      {
	 auto rp = std::dynamic_pointer_cast<ReadingProcess>($1);
	 auto p = std::dynamic_pointer_cast<Process>($3);
	 rp->set_process(p);
	 csp_context.symtab().close();
	 $$ = rp;
      }
   | identifier EM identifier ARROW prefix_or_process_expression
      {
	 auto cid = std::dynamic_pointer_cast<Identifier>($1);
	 auto channel = get_channel(@$, csp_context, cid->get_name());
	 auto id = std::dynamic_pointer_cast<Identifier>($3);
	 auto p = std::dynamic_pointer_cast<Process>($5);
	 if (csp_context.symtab().defined(id->get_name())) {
	    $$ = std::make_shared<WritingProcess>(channel, id->get_name(), p);
	 } else {
	    auto event = channel->get_name() + "." + id->get_name();
	    $$ = std::make_shared<PrefixedProcess>(event, p,
	       csp_context.symtab());
	 }
      }
   | identifier EM expression ARROW prefix_or_process_expression
      {
	 auto cid = std::dynamic_pointer_cast<Identifier>($1);
	 auto channel = get_channel(@$, csp_context, cid->get_name());
	 auto expr = std::dynamic_pointer_cast<Expression>($3);
	 auto p = std::dynamic_pointer_cast<Process>($5);
	 $$ = std::make_shared<WritingProcess>(channel, expr, p);
      }
   ;

input_operation: identifier QM identifier
      {
	 csp_context.symtab().open();
	 auto cid = std::dynamic_pointer_cast<Identifier>($1);
	 auto channel = get_channel(@$, csp_context, cid->get_name());
	 auto variable = std::dynamic_pointer_cast<Identifier>($3);
	 auto p = std::make_shared<ReadingProcess>(channel,
	    variable->get_name());
	 csp_context.symtab().define(variable->get_name());
	 $$ = p;
      }
   ;
prefix_or_process_expression: process_expression
   | prefix_expression
   ;

parameters: LPAREN parameter_list RPAREN
      { $$ = $2; }
   ;
parameter_list: identifier
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($1);
	 auto params = std::make_shared<Parameters>();
	 params->add(id->get_name());
	 $$ = params;
      }
   | parameter_list COMMA identifier
      {
	 auto params = std::dynamic_pointer_cast<Parameters>($1);
	 auto id = std::dynamic_pointer_cast<Identifier>($3);
	 params->add(id->get_name());
	 $$ = params;
      }
   ;

alphabet: LBRACE RBRACE
      { $$ = std::make_shared<EventSet>(); }
   | LBRACE alphabet_members RBRACE
      { $$ = $2; }
   | STRING
      { $$ = std::make_shared<EventSet>("*string*"); }
   | INTEGER
      { $$ = std::make_shared<EventSet>("*integer*"); }
   ;
alphabet_members: event
      {
	 auto event = std::dynamic_pointer_cast<Identifier>($1);
	 $$ = std::make_shared<EventSet>(event->get_name());
      }
   | alphabet_members COMMA event
      {
	 auto set = std::dynamic_pointer_cast<EventSet>($1);
	 auto event = std::dynamic_pointer_cast<Identifier>($3);
	 Alphabet a = set->get_alphabet();
	 a.add(event->get_name());
	 $$ = std::make_shared<EventSet>(a);
      }
   ;

open_expression: LPAREN
      { csp_context.symtab().open(); }
close_expression: RPAREN
      { csp_context.symtab().close(); }

expression: LPAREN integer_expression RPAREN
      { $$ = $2; }
   ;
integer_expression: identifier
      {
	 auto id = std::dynamic_pointer_cast<Identifier>($1);
	 auto name = id->get_name();
	 if (csp_context.symtab().defined(name)) {
	    $$ = std::make_shared<Variable>(@$, csp_context, name);
	 } else {
	    const char* s = name.c_str();
	    char* endptr;
	    auto val = std::strtoul(s, &endptr, 10);
	    if (*endptr) {
	       yyerror(@$, csp_context,
		  "integer value or integer variable expected");
	       val = 0;
	    }
	    $$ = std::make_shared<Integer>(val);
	 }
      }
   | LPAREN integer_expression RPAREN
      { $$ = $2; }
   | integer_expression PLUS integer_expression
      {
	 auto left = std::dynamic_pointer_cast<Expression>($1);
	 auto right = std::dynamic_pointer_cast<Expression>($3);
	 $$ = std::make_shared<Binary>(left, right, "+",
	    [](Value leftval, Value rightval) {
	       return leftval + rightval;
	    });
      }
   | integer_expression MINUS integer_expression
      {
	 auto left = std::dynamic_pointer_cast<Expression>($1);
	 auto right = std::dynamic_pointer_cast<Expression>($3);
	 $$ = std::make_shared<Binary>(left, right, "-",
	    [](Value leftval, Value rightval) {
	       return leftval - rightval;
	    });
      }
   | integer_expression TIMES integer_expression
      {
	 auto left = std::dynamic_pointer_cast<Expression>($1);
	 auto right = std::dynamic_pointer_cast<Expression>($3);
	 $$ = std::make_shared<Binary>(left, right, "*",
	    [](Value leftval, Value rightval) {
	       return leftval * rightval;
	    });
      }
   | integer_expression DIV integer_expression
      {
	 auto left = std::dynamic_pointer_cast<Expression>($1);
	 auto right = std::dynamic_pointer_cast<Expression>($3);
	 $$ = std::make_shared<Binary>(left, right, "div",
	    [](Value leftval, Value rightval) {
	       return leftval / rightval;
	    });
      }
   | integer_expression MOD integer_expression
      {
	 auto left = std::dynamic_pointer_cast<Expression>($1);
	 auto right = std::dynamic_pointer_cast<Expression>($3);
	 $$ = std::make_shared<Binary>(left, right, "mod",
	    [](Value leftval, Value rightval) {
	       return leftval % rightval;
	    });
      }
   ;

event: identifier;
label: identifier;
identifier: LCIDENT
   | identifier PERIOD LCIDENT
      {
	 auto qualifier = std::dynamic_pointer_cast<Identifier>($1);
	 auto ident = std::dynamic_pointer_cast<Identifier>($3);
	 $$ = std::make_shared<Identifier>(qualifier, ident);
      }
   ;
process: UCIDENT;

%%

ChannelPtr get_channel(const location& loc, Context& context,
      const std::string& name) {
   auto channel = context.symtab().lookup<Channel>(name);
   if (!channel) {
      if (context.symtab().defined(name)) {
	 yyerror(loc, context, "conflicting definition for '%s'", name);
      }
      channel = std::make_shared<Channel>(name);
      if (!context.symtab().global_insert(name, channel)) {
	 yyerror(loc, context, "conflicting definition for '%s'", name);
      }
   }
   return channel;
}

NamedProcessPtr get_process(const location& loc, const std::string& name,
      Context& context) {
   auto p = context.symtab().lookup<NamedProcess>(name);
   if (p) return p;
   auto rp = std::make_shared<ProcessReference>(loc, name, context);
   rp->register_ref(); rp->set_refonly();
   return rp;
}
